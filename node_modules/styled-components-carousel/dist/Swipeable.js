"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var helpers_1 = require("./helpers");
var SwipeDirection;
(function (SwipeDirection) {
    SwipeDirection["Left"] = "Left";
    SwipeDirection["Right"] = "Right";
})(SwipeDirection = exports.SwipeDirection || (exports.SwipeDirection = {}));
var initialState = {
    swiping: false,
    movementX: 0,
    startX: 0,
};
var Swipeable = function (_a) {
    var swipeable = _a.swipeable, xMovementTrigger = _a.xMovementTrigger, onSwipe = _a.onSwipe, children = _a.children;
    var _b = react_1.useState(initialState), swipingState = _b[0], setSwipingState = _b[1];
    var onSwipeStart = function (movementX, startX) {
        if (startX === void 0) { startX = 0; }
        if (swipeable) {
            setSwipingState({
                swiping: true,
                movementX: movementX,
                startX: startX,
            });
        }
    };
    var onMouseDown = function (event) {
        onSwipeStart(event.movementX);
    };
    var onTouchStart = function (event) {
        var touch = event.touches[0];
        onSwipeStart(0, touch.clientX);
    };
    var onMouseMove = function (event) {
        if (swipingState.swiping) {
            if (helpers_1.isValidSwipe(swipingState.movementX + event.movementX, xMovementTrigger * 2) && onSwipe) {
                onSwipe(helpers_1.getSwipeDirection(swipingState.movementX));
                setSwipingState(__assign(__assign({}, swipingState), { movementX: 0, swiping: false }));
            }
            else {
                setSwipingState(__assign(__assign({}, swipingState), { movementX: swipingState.movementX + event.movementX }));
            }
        }
    };
    var onTouchMove = function (event) {
        var touch = event.touches[0];
        if (swipingState.swiping) {
            if (helpers_1.isValidSwipe(touch.clientX - swipingState.startX, xMovementTrigger * 2) && onSwipe) {
                onSwipe(helpers_1.getSwipeDirection(swipingState.movementX));
                setSwipingState(__assign(__assign({}, swipingState), { movementX: 0, swiping: false }));
            }
            else {
                setSwipingState(__assign(__assign({}, swipingState), { movementX: touch.clientX - swipingState.startX }));
            }
        }
    };
    var onSwipeEnd = function () {
        if (swipingState.swiping) {
            if (helpers_1.isValidSwipe(swipingState.movementX, xMovementTrigger)) {
                if (onSwipe)
                    onSwipe(helpers_1.getSwipeDirection(swipingState.movementX));
            }
            setSwipingState(__assign(__assign({}, swipingState), { movementX: 0, swiping: false }));
        }
    };
    return (react_1.default.createElement("div", { onMouseDown: onMouseDown, onMouseMove: onMouseMove, onMouseUp: onSwipeEnd, onTouchStart: onTouchStart, onTouchMove: onTouchMove, onTouchEnd: onSwipeEnd, style: {
            cursor: 'pointer',
            transform: "translate3d(" + swipingState.movementX + "px, 0px, 0px)",
        } }, children));
};
exports.default = Swipeable;
//# sourceMappingURL=Swipeable.js.map