"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var styled_components_1 = require("styled-components");
var Swipeable_1 = require("./Swipeable");
exports.getPreSlideCount = function (_a) {
    var slideCount = _a.slideCount, slidesToShow = _a.slidesToShow, infinite = _a.infinite, center = _a.center;
    if (!infinite) {
        return 0;
    }
    return (slideCount < slidesToShow ? slidesToShow : slideCount) + (center ? 1 : 0);
};
exports.getPostSlideCount = function (_a) {
    var slideCount = _a.slideCount, slidesToShow = _a.slidesToShow, infinite = _a.infinite;
    if (!infinite) {
        return 0;
    }
    return slideCount + slidesToShow + 1;
};
exports.getTotalSlideCount = function (_a) {
    var slideCount = _a.slideCount, slidesToShow = _a.slidesToShow, infinite = _a.infinite, center = _a.center;
    if (slideCount === 1) {
        return 1;
    }
    return (exports.getPreSlideCount({
        slideCount: slideCount,
        slidesToShow: slidesToShow,
        infinite: infinite,
        center: center,
    }) +
        exports.getPostSlideCount({
            slideCount: slideCount,
            slidesToShow: slidesToShow,
            infinite: infinite,
        }) +
        slideCount);
};
exports.getIndexForAction = function (current, target, childrenCount) {
    var previousActive = current;
    var active = target;
    var infiniteActive = target;
    if (infiniteActive < 0) {
        infiniteActive += childrenCount;
        if (previousActive < 0) {
            previousActive = current += childrenCount;
            active = infiniteActive;
        }
    }
    else if (infiniteActive > childrenCount - 1) {
        infiniteActive -= childrenCount;
        if (previousActive > childrenCount - 1) {
            previousActive = current -= childrenCount;
            active = infiniteActive;
        }
    }
    return {
        previousActive: previousActive,
        active: active,
        infiniteActive: infiniteActive,
    };
};
exports.canGoPrevious = function (active, infinite) {
    if (infinite || active > 0) {
        return true;
    }
    return false;
};
exports.canGoNext = function (active, items, slidesToShow, infinite) {
    if (infinite || active < items - slidesToShow) {
        return true;
    }
    return false;
};
exports.matchBreakpoint = function (size, settings, breakpoints) {
    if (breakpoints && breakpoints.length > 0) {
        var breakpoint = breakpoints
            .sort(function (breakpointA, breakpointB) { return breakpointB.size - breakpointA.size; })
            .find(function (findBreakpoint) { return findBreakpoint.size < size; });
        return (breakpoint === null || breakpoint === void 0 ? void 0 : breakpoint.settings) || breakpoints[breakpoints.length - 1].settings;
    }
    return settings;
};
exports.getSwipeDirection = function (movementX) {
    if (movementX < 0) {
        return Swipeable_1.SwipeDirection.Left;
    }
    return Swipeable_1.SwipeDirection.Right;
};
exports.isValidSwipe = function (movement, trigger) { return trigger < Math.abs(movement); };
exports.isIndexFocused = function (index, active) { return index === active; };
exports.getSliderStyles = function (_a) {
    var slideCount = _a.slideCount, _b = _a.slidesToShow, slidesToShow = _b === void 0 ? 1 : _b, center = _a.center, _c = _a.centerPadding, centerPadding = _c === void 0 ? 0 : _c, infinite = _a.infinite, sliderWidth = _a.sliderWidth;
    var slideWidth;
    var slideOffset;
    var slidesToOffset = 0;
    var trackWidth;
    var centerPaddingAdj;
    var totalSlideCount = exports.getTotalSlideCount({
        slideCount: slideCount,
        slidesToShow: slidesToShow,
        infinite: infinite,
        center: center,
    });
    if (sliderWidth) {
        centerPaddingAdj = center ? centerPadding * 2 : 0;
        slideWidth = Math.ceil((sliderWidth - centerPaddingAdj) / slidesToShow);
        if (infinite) {
            slidesToOffset = -exports.getPreSlideCount({
                slideCount: slideCount,
                slidesToShow: slidesToShow,
                infinite: infinite,
                center: center,
            });
            if (slidesToShow >= slideCount) {
                slidesToOffset += 1 + slidesToShow - slideCount;
            }
            if (center) {
                slidesToOffset += Math.floor(slidesToShow / 2);
            }
        }
        else if (center) {
            slidesToOffset = Math.floor(slidesToShow / 2);
            if (slidesToShow !== 1) {
                var currentSlideFit = sliderWidth / slideWidth;
                var newSlidesToShow = currentSlideFit + slidesToOffset;
                slideWidth = Math.ceil((sliderWidth - centerPaddingAdj) / newSlidesToShow);
            }
        }
        slideOffset = slidesToOffset * slideWidth;
        trackWidth = totalSlideCount * slideWidth;
    }
    return {
        slideOffset: slideOffset,
        trackWidth: trackWidth,
        centerPadding: centerPadding,
        slideWidth: slideWidth || 0,
    };
};
var getTransform = function (percentage, xValue) { return "\n    " + percentage + "% {\n        transform: translate3d(" + xValue + "px, 0px, 0px);\n    }"; };
exports.getSlideAnimation = function (previousActive, active, infiniteActive, slideWidth, slideOffset) {
    var start = 0;
    var end = 0;
    if (slideWidth && (slideOffset || slideOffset === 0)) {
        var slideDelta = -1 * slideWidth;
        start = previousActive * slideDelta + slideOffset;
        end = active * slideDelta + slideOffset;
        if (infiniteActive !== active) {
            end = infiniteActive * slideDelta + slideOffset;
            start = infiniteActive > previousActive ? end + slideDelta : end - slideDelta;
        }
    }
    var startTransform = getTransform('0', start);
    var endTransform = getTransform('100', end);
    var animation = "\n        " + startTransform + "\n        " + endTransform + "\n    ";
    return styled_components_1.keyframes(templateObject_1 || (templateObject_1 = __makeTemplateObject(["", ""], ["", ""])), animation);
};
var templateObject_1;
//# sourceMappingURL=helpers.js.map