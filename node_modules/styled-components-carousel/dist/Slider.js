"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var styled_components_1 = __importDefault(require("styled-components"));
var lodash_debounce_1 = __importDefault(require("lodash.debounce"));
var Track_1 = __importDefault(require("./Track"));
var Slide_1 = __importDefault(require("./Slide"));
var Swipeable_1 = __importDefault(require("./Swipeable"));
var helpers_1 = require("./helpers");
var Slider = styled_components_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    position: relative;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    width: 100%;\n"], ["\n    position: relative;\n    overflow: hidden;\n    display: flex;\n    align-items: center;\n    width: 100%;\n"])));
var renderSlides = function (children, slideCount, slideWidth, slidesToShow, active, scaleOnFocus, infinite, center, debug) {
    if (slideWidth === void 0) { slideWidth = 0; }
    var slides = [];
    var preClones = [];
    var postClones = [];
    react_1.default.Children.forEach(children, function (child, index) {
        slides.push(react_1.default.createElement(Slide_1.default, { width: slideWidth, key: "slide" + index, focused: helpers_1.isIndexFocused(index, active), scaleOnFocus: scaleOnFocus },
            child,
            debug && react_1.default.createElement("p", null, "slide " + index)));
        if (infinite) {
            var preCloneNo = slideCount - index;
            if (preCloneNo <=
                helpers_1.getPreSlideCount({
                    slideCount: slideCount,
                    slidesToShow: slidesToShow,
                    infinite: infinite,
                    center: center,
                })) {
                preClones.push(react_1.default.createElement(Slide_1.default, { width: slideWidth, key: "slide-pre" + -preCloneNo },
                    child,
                    debug && react_1.default.createElement("p", null, "pre clone " + preCloneNo)));
            }
            var postCloneNo = index + slideCount;
            postClones.push(react_1.default.createElement(Slide_1.default, { width: slideWidth, key: "slide-post" + postCloneNo },
                child,
                debug && react_1.default.createElement("p", null, "post clone " + postCloneNo)));
        }
    });
    return __spreadArrays(preClones, slides, postClones);
};
var Component = function (_a) {
    var children = _a.children, previousActive = _a.previousActive, active = _a.active, infiniteActive = _a.infiniteActive, _b = _a.slidesToShow, slidesToShow = _b === void 0 ? 1 : _b, center = _a.center, centerPadding = _a.centerPadding, infinite = _a.infinite, onWindowResize = _a.onWindowResize, swipeable = _a.swipeable, scaleOnFocus = _a.scaleOnFocus, onSwipe = _a.onSwipe, debug = _a.debug;
    var sliderRef = react_1.useRef(null);
    var slideCount = react_1.default.Children.count(children);
    var _c = react_1.useState(0), sliderWidth = _c[0], setSliderWidth = _c[1];
    var _d = react_1.useState(helpers_1.getSliderStyles({
        slideCount: slideCount,
        slidesToShow: slidesToShow,
        center: center,
        centerPadding: centerPadding,
        infinite: infinite,
        sliderWidth: sliderWidth,
    })), styles = _d[0], setStyles = _d[1];
    react_1.useEffect(function () {
        var handleWindowResize = lodash_debounce_1.default(function () {
            onWindowResize();
            setSliderWidth(sliderRef.current ? Math.ceil(sliderRef.current.offsetWidth) : 0);
        }, 100);
        setSliderWidth(sliderRef.current ? Math.ceil(sliderRef.current.offsetWidth) : 0);
        window.addEventListener('resize', handleWindowResize);
        return function () {
            window.removeEventListener('resize', handleWindowResize);
        };
    }, [onWindowResize]);
    react_1.useEffect(function () {
        setStyles(helpers_1.getSliderStyles({
            slideCount: slideCount,
            slidesToShow: slidesToShow,
            center: center,
            centerPadding: centerPadding,
            infinite: infinite,
            sliderWidth: sliderWidth,
        }));
    }, [previousActive, active, infiniteActive, slidesToShow, center, centerPadding, infinite, sliderWidth]);
    return (react_1.default.createElement(Slider, { ref: sliderRef },
        react_1.default.createElement(Swipeable_1.default, { swipeable: swipeable, xMovementTrigger: styles.slideWidth / 2, onSwipe: onSwipe },
            react_1.default.createElement(Track_1.default, { width: styles.trackWidth, center: center, centerPadding: centerPadding, previousActive: previousActive, active: active, infiniteActive: infiniteActive, slideWidth: styles.slideWidth, slideOffset: styles.slideOffset }, renderSlides(children, slideCount, styles.slideWidth, slidesToShow, infiniteActive, scaleOnFocus, infinite, center, debug)))));
};
exports.default = Component;
var templateObject_1;
//# sourceMappingURL=Slider.js.map