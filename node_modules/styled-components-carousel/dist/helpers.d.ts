import { Breakpoint, CarouselSettings } from './Carousel';
import { SwipeDirection } from './Swipeable';
declare type SlideCountParams = {
    slideCount: number;
    slidesToShow: number;
    infinite?: boolean;
    center?: boolean;
};
declare type SliderStyleProps = {
    sliderWidth: number;
    slideCount: number;
    slidesToShow?: number;
    center?: boolean;
    centerPadding?: number;
    infinite?: boolean;
};
export declare const getPreSlideCount: ({ slideCount, slidesToShow, infinite, center }: SlideCountParams) => number;
export declare const getPostSlideCount: ({ slideCount, slidesToShow, infinite }: SlideCountParams) => number;
export declare const getTotalSlideCount: ({ slideCount, slidesToShow, infinite, center }: SlideCountParams) => number;
export declare const getIndexForAction: (current: number, target: number, childrenCount: number) => {
    previousActive: number;
    active: number;
    infiniteActive: number;
};
export declare const canGoPrevious: (active: number, infinite?: boolean | undefined) => boolean;
export declare const canGoNext: (active: number, items: number, slidesToShow: number, infinite?: boolean | undefined) => boolean;
export declare const matchBreakpoint: (size: number, settings: CarouselSettings, breakpoints?: Breakpoint[] | undefined) => CarouselSettings;
export declare const getSwipeDirection: (movementX: number) => SwipeDirection;
export declare const isValidSwipe: (movement: number, trigger: number) => boolean;
export declare const isIndexFocused: (index: number, active: number) => boolean;
export declare const getSliderStyles: ({ slideCount, slidesToShow, center, centerPadding, infinite, sliderWidth, }: SliderStyleProps) => {
    slideOffset: number | undefined;
    trackWidth: number | undefined;
    centerPadding: number;
    slideWidth: number;
};
export declare const getSlideAnimation: (previousActive: number, active: number, infiniteActive: number, slideWidth?: number | undefined, slideOffset?: number | undefined) => import("styled-components").Keyframes;
export {};
